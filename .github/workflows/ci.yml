name: CI/CD

on:
  push:
    branches:
      - master
      - py38-upgrade
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        python:
          - 3.8
        pypi_build:
          - complete
          - only_plotting
          - only_postgres
          - only_r
          - basic
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: before_install
        run: |
          echo "PYPI_BUILD=${{ matrix.pypi_build }}" >> $GITHUB_ENV
          echo "BOTO_CONFIG=/dev/null" >> $GITHUB_ENV
          pip install wheel
      - name: install_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          bash scripts/linux_install.sh
      - name: install_mac
        if : matrix.os == 'macos-latest'
        run: |
          bash scripts/mac_install.sh
      - name: install R
        if: matrix.pypi_build == 'complete' || matrix.pypi_build == 'only_r'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 4.2.0
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: 'x64'
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
          version: 2.4.9
          enable-pep582: true
      - name: python install
        run: |
          pdm config python.use_venv false
          pdm install

          if [ $PYPI_BUILD = 'complete' ]; then
            echo "Installing postgres and plotting requirements"
            # export LDFLAGS="-L/usr/local/opt/openssl/lib"
            # export CPPFLAGS="-I/usr/local/opt/openssl/include"
            # pip install psycopg2>=2.8.3
            # pip install psycopg2_binary>=2.8.2
            pdm install -G:all
            
            # export LDFLAGS="-L/usr/local/opt/graphviz/lib"
            # export CPPFLAGS="-I/usr/local/opt/graphviz/include"
            # pip install pygraphviz
            # unset LDFLAGS
            # unset CPPFLAGS
            # pip install "rpy2>=2.9.1,<=3.2.7"
          elif [ $PYPI_BUILD = 'only_postgres' ]; then
            echo "Installing postgres requirements"
            pdm install -G postgres
          elif [ $PYPI_BUILD = 'only_plotting' ]; then
            echo "Installing plotting requirements"
            export LDFLAGS="-L/usr/local/opt/graphviz/lib"
            export CPPFLAGS="-I/usr/local/opt/graphviz/include"
            pip install pygraphviz
            unset LDFLAGS
            unset CPPFLAGS
            # pdm install -G plotting
          elif [ $PYPI_BUILD = 'only_r' ]; then
            echo "Installing R requirements"
            pdm install -G R
          fi
      - name: tests
        run: |
          if [ $PYPI_BUILD = 'complete' ]; then
              pdm run pytest
          elif [ $PYPI_BUILD = 'only_plotting' ]; then
              pdm run pytest -m "not postgres"
          elif [ $PYPI_BUILD = 'only_postgres' ]; then
              pdm run pytest -m "not plotting"
          elif [ $PYPI_BUILD = 'only_r' ]; then
              # r skipif handled internally - only need to specify not postgres or plotting
              python -m pytest -m "not postgres and not plotting"
          else
              python -m pytest -m "not optional"
          fi

  # build-and-publish:
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   if: github.event_name == 'release' && github.event.action == 'created'
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.7
  #       architecture: 'x64'
  #   - name: Install pypa/build
  #     run: >-
  #       python -m
  #       pip install
  #       build
  #       sphinx
  #       --user
  #   - name: Build a binary wheel and a source tarball
  #     run: >-
  #       python -m
  #       build
  #       --sdist
  #       --wheel
  #       --outdir dist/
  #       .
  #   - name: publish to pypi
  #     if: startsWith(github.ref, 'refs/tags')
  #     uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       password: ${{ secrets.PYPI_API_TOKEN }}
  #   - name: build docs
  #     run: bash scripts/generate_docs.sh || exit 1 
  #   - name: publish github pages
  #     uses: peaceiris/actions-gh-pages@v3
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./docs
